from typing import Any, List, Callable
from lab5.BinaryNode import BinaryNode
import treelib as tr


class BinaryTree:
    root: BinaryNode

    def __init__(self, value=None):
        self.root = BinaryNode(value)

    #def add(self, value: Any, parent_name: 'BinaryNode') -> None:

    def traverse_in_order(self, visit: Callable[['BinaryNode'], None]) -> None:
        self.root.traverse_in_order(visit)

    def traverse_post_order(self, visit: Callable[['BinaryNode'], None]) -> None:
        self.root.traverse_post_order(visit)

    def traverse_pre_order(self, visit: Callable[['BinaryNode'], None]) -> None:
        self.root.traverse_pre_order(visit)

    #def show(self) -> None:


tree = BinaryTree(10)
assert tree.root.value == 10

# add left/right instead of worms
tree.root.right_child = BinaryNode(2)
tree.root.right_child.left_child = BinaryNode(5)
assert tree.root.right_child.value == 2
assert tree.root.right_child.is_leaf() is False

tree.root.left_child = BinaryNode(23)
tree.root.left_child.left_child = BinaryNode(1)
assert tree.root.left_child.left_child.value == 1
assert tree.root.left_child.left_child.is_leaf() is True
from typing import Any, List, Callable, Union


class BinaryNode:
    value: Any
    left_child: 'BinaryNode'
    right_child: 'BinaryNode'

    def __init__(self, value=None):
        self.value = value
        self.left_child = None
        self.right_child = None

    def is_leaf(self) -> bool:  # is this node a leaf (has no children)
        if self.left_child is None:
            if self.right_child is None:
                return True
        else:
            return False

    def add_left_child(self, child: 'BinaryNode') -> None:  # add a left child
        self.left_child = child

    def add_right_child(self, child: 'BinaryNode') -> None:  # add a right child
        self.right_child = child

    def traverse_in_order(self, visit: Callable[[Any], None]):
        if self is not None:
            self.left_child.traverse_in_order(visit)
            visit(self)
            self.left_child.traverse_in_order(visit)

    def traverse_post_order(self, visit: Callable[[Any], None]):
        if self is not None:
            self.left_child.traverse_post_order(visit)
            self.right_child.traverse_post_order(visit)
            visit(self)

    def traverse_pre_order(self, visit: Callable[[Any], None]):
        if self is not None:
            visit(self)
            self.left_child.traverse_post_order(visit)
            self.right_child.traverse_post_order(visit)

    def __str__(self) -> str:
        return str(self.value)


root = BinaryNode(9)
root.left_child = BinaryNode(1)
root.right_child = BinaryNode(3)

tiny.cc/5_i0
m7WgFX
